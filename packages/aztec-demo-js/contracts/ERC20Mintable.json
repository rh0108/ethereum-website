{
  "contractName": "ERC20Mintable",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x095ea7b3"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x18160ddd"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x23b872dd"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x39509351"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x70a08231"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xa457c2d7"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xa9059cbb"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xdd62ed3e"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event",
      "signature": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event",
      "signature": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x40c10f19"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b5061067a806100206000396000f3006080604052600436106100985763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461009d57806318160ddd146100d557806323b872dd146100fc578063395093511461012657806340c10f191461014a57806370a082311461016e578063a457c2d71461018f578063a9059cbb146101b3578063dd62ed3e146101d7575b600080fd5b3480156100a957600080fd5b506100c1600160a060020a03600435166024356101fe565b604080519115158252519081900360200190f35b3480156100e157600080fd5b506100ea61027c565b60408051918252519081900360200190f35b34801561010857600080fd5b506100c1600160a060020a0360043581169060243516604435610282565b34801561013257600080fd5b506100c1600160a060020a036004351660243561031f565b34801561015657600080fd5b506100c1600160a060020a03600435166024356103cf565b34801561017a57600080fd5b506100ea600160a060020a03600435166103e4565b34801561019b57600080fd5b506100c1600160a060020a03600435166024356103ff565b3480156101bf57600080fd5b506100c1600160a060020a036004351660243561044a565b3480156101e357600080fd5b506100ea600160a060020a0360043581169060243516610457565b6000600160a060020a038316151561021557600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526001602090815260408083203384529091528120548211156102b257600080fd5b600160a060020a03841660009081526001602090815260408083203384529091529020546102e6908363ffffffff61048216565b600160a060020a0385166000908152600160209081526040808320338452909152902055610315848484610499565b5060019392505050565b6000600160a060020a038316151561033657600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461036a908363ffffffff61058b16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60006103db83836105a4565b50600192915050565b600160a060020a031660009081526020819052604090205490565b6000600160a060020a038316151561041657600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461036a908363ffffffff61048216565b60006103db338484610499565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000808383111561049257600080fd5b5050900390565b600160a060020a0383166000908152602081905260409020548111156104be57600080fd5b600160a060020a03821615156104d357600080fd5b600160a060020a0383166000908152602081905260409020546104fc908263ffffffff61048216565b600160a060020a038085166000908152602081905260408082209390935590841681522054610531908263ffffffff61058b16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561059d57600080fd5b9392505050565b600160a060020a03821615156105b957600080fd5b6002546105cc908263ffffffff61058b16565b600255600160a060020a0382166000908152602081905260409020546105f8908263ffffffff61058b16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350505600a165627a7a723058206f655b58fc0abcfff306b568122d2190b208e6ef0e191001f68722bd8b0fa1830029",
  "deployedBytecode": "0x6080604052600436106100985763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461009d57806318160ddd146100d557806323b872dd146100fc578063395093511461012657806340c10f191461014a57806370a082311461016e578063a457c2d71461018f578063a9059cbb146101b3578063dd62ed3e146101d7575b600080fd5b3480156100a957600080fd5b506100c1600160a060020a03600435166024356101fe565b604080519115158252519081900360200190f35b3480156100e157600080fd5b506100ea61027c565b60408051918252519081900360200190f35b34801561010857600080fd5b506100c1600160a060020a0360043581169060243516604435610282565b34801561013257600080fd5b506100c1600160a060020a036004351660243561031f565b34801561015657600080fd5b506100c1600160a060020a03600435166024356103cf565b34801561017a57600080fd5b506100ea600160a060020a03600435166103e4565b34801561019b57600080fd5b506100c1600160a060020a03600435166024356103ff565b3480156101bf57600080fd5b506100c1600160a060020a036004351660243561044a565b3480156101e357600080fd5b506100ea600160a060020a0360043581169060243516610457565b6000600160a060020a038316151561021557600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526001602090815260408083203384529091528120548211156102b257600080fd5b600160a060020a03841660009081526001602090815260408083203384529091529020546102e6908363ffffffff61048216565b600160a060020a0385166000908152600160209081526040808320338452909152902055610315848484610499565b5060019392505050565b6000600160a060020a038316151561033657600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461036a908363ffffffff61058b16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60006103db83836105a4565b50600192915050565b600160a060020a031660009081526020819052604090205490565b6000600160a060020a038316151561041657600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461036a908363ffffffff61048216565b60006103db338484610499565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000808383111561049257600080fd5b5050900390565b600160a060020a0383166000908152602081905260409020548111156104be57600080fd5b600160a060020a03821615156104d357600080fd5b600160a060020a0383166000908152602081905260409020546104fc908263ffffffff61048216565b600160a060020a038085166000908152602081905260408082209390935590841681522054610531908263ffffffff61058b16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561059d57600080fd5b9392505050565b600160a060020a03821615156105b957600080fd5b6002546105cc908263ffffffff61058b16565b600255600160a060020a0382166000908152602081905260409020546105f8908263ffffffff61058b16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350505600a165627a7a723058206f655b58fc0abcfff306b568122d2190b208e6ef0e191001f68722bd8b0fa1830029",
  "sourceMap": "238:396:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:396:4;;;;;;;",
  "deployedSourceMap": "238:396:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3338:220:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3338:220:3;-1:-1:-1;;;;;3338:220:3;;;;;;;;;;;;;;;;;;;;;;;;;1598:83;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1598:83:3;;;;;;;;;;;;;;;;;;;;3830:288;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3830:288:3;-1:-1:-1;;;;;3830:288:3;;;;;;;;;;;;4569:330;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4569:330:3;-1:-1:-1;;;;;4569:330:3;;;;;;;503:129:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;503:129:4;-1:-1:-1;;;;;503:129:4;;;;;;;1878:98:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1878:98:3;-1:-1:-1;;;;;1878:98:3;;;;;5355:340;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5355:340:3;-1:-1:-1;;;;;5355:340:3;;;;;;;2595:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2595:127:3;-1:-1:-1;;;;;2595:127:3;;;;;;;2293:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2293:150:3;-1:-1:-1;;;;;2293:150:3;;;;;;;;;;3338:220;3403:4;-1:-1:-1;;;;;3423:21:3;;;;3415:30;;;;;;3461:10;3452:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;3452:29:3;;;;;;;;;;;;:37;;;3500:36;;;;;;;3452:29;;3461:10;3500:36;;;;;;;;;;;-1:-1:-1;3549:4:3;3338:220;;;;:::o;1598:83::-;1664:12;;1598:83;:::o;3830:288::-;-1:-1:-1;;;;;3964:14:3;;3933:4;3964:14;;;:8;:14;;;;;;;;3979:10;3964:26;;;;;;;;3955:35;;;3947:44;;;;;;-1:-1:-1;;;;;4027:14:3;;;;;;:8;:14;;;;;;;;4042:10;4027:26;;;;;;;;:37;;4058:5;4027:37;:30;:37;:::i;:::-;-1:-1:-1;;;;;3998:14:3;;;;;;:8;:14;;;;;;;;4013:10;3998:26;;;;;;;:66;4070:26;4007:4;4086:2;4090:5;4070:9;:26::i;:::-;-1:-1:-1;4109:4:3;3830:288;;;;;:::o;4569:330::-;4669:4;-1:-1:-1;;;;;4691:21:3;;;;4683:30;;;;;;4769:10;4760:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4760:29:3;;;;;;;;;;:45;;4794:10;4760:45;:33;:45;:::i;:::-;4729:10;4720:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4720:29:3;;;;;;;;;;;;:86;;;4817:60;;;;;;4720:29;;4817:60;;;;;;;;;;;-1:-1:-1;4890:4:3;4569:330;;;;:::o;503:129:4:-;580:4;594:16;600:2;604:5;594;:16::i;:::-;-1:-1:-1;623:4:4;503:129;;;;:::o;1878:98:3:-;-1:-1:-1;;;;;1955:16:3;1933:7;1955:16;;;;;;;;;;;;1878:98::o;5355:340::-;5460:4;-1:-1:-1;;;;;5482:21:3;;;;5474:30;;;;;;5560:10;5551:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;5551:29:3;;;;;;;;;;:50;;5585:15;5551:50;:33;:50;:::i;2595:127::-;2656:4;2668:32;2678:10;2690:2;2694:5;2668:9;:32::i;2293:150::-;-1:-1:-1;;;;;2414:15:3;;;2390:7;2414:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;2293:150::o;1188:131:5:-;1246:7;;1269:6;;;;1261:15;;;;;;-1:-1:-1;;1294:5:5;;;1188:131::o;5895:277:3:-;-1:-1:-1;;;;;5987:15:3;;:9;:15;;;;;;;;;;;5978:24;;;5970:33;;;;;;-1:-1:-1;;;;;6017:16:3;;;;6009:25;;;;;;-1:-1:-1;;;;;6059:15:3;;:9;:15;;;;;;;;;;;:26;;6079:5;6059:26;:19;:26;:::i;:::-;-1:-1:-1;;;;;6041:15:3;;;:9;:15;;;;;;;;;;;:44;;;;6107:13;;;;;;;:24;;6125:5;6107:24;:17;:24;:::i;:::-;-1:-1:-1;;;;;6091:13:3;;;:9;:13;;;;;;;;;;;;:40;;;;6142:25;;;;;;;6091:13;;6142:25;;;;;;;;;;;;;5895:277;;;:::o;1382:131:5:-;1440:7;1467:5;;;1486:6;;;;1478:15;;;;;;1507:1;1382:131;-1:-1:-1;;;1382:131:5:o;6499:244:3:-;-1:-1:-1;;;;;6569:21:3;;;;6561:30;;;;;;6612:12;;:23;;6629:5;6612:23;:16;:23;:::i;:::-;6597:12;:38;-1:-1:-1;;;;;6662:18:3;;:9;:18;;;;;;;;;;;:29;;6685:5;6662:29;:22;:29;:::i;:::-;-1:-1:-1;;;;;6641:18:3;;:9;:18;;;;;;;;;;;:50;;;;6702:36;;;;;;;6641:18;;:9;;6702:36;;;;;;;;;;6499:244;;:::o",
  "source": "pragma solidity ^0.4.24;\n\nimport \"./ERC20.sol\";\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n * Sourced from OpenZeppelin and thoroughly butchered to remove security guards.\n * Anybody can mint - STRICTLY FOR TEST PURPOSES\n */\ncontract ERC20Mintable is ERC20 {\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    _mint(to, value);\n    return true;\n  }\n}",
  "sourcePath": "/Users/paulrberg/Documents/Work/AZTEC/Coding/AZTEC/contracts/ERC20/ERC20Mintable.sol",
  "ast": {
    "absolutePath": "/Users/paulrberg/Documents/Work/AZTEC/Coding/AZTEC/contracts/ERC20/ERC20Mintable.sol",
    "exportedSymbols": {
      "ERC20Mintable": [
        940
      ]
    },
    "id": 941,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 919,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:4"
      },
      {
        "absolutePath": "/Users/paulrberg/Documents/Work/AZTEC/Coding/AZTEC/contracts/ERC20/ERC20.sol",
        "file": "./ERC20.sol",
        "id": 920,
        "nodeType": "ImportDirective",
        "scope": 941,
        "sourceUnit": 918,
        "src": "26:21:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 921,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 917,
              "src": "264:5:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$917",
                "typeString": "contract ERC20"
              }
            },
            "id": 922,
            "nodeType": "InheritanceSpecifier",
            "src": "264:5:4"
          }
        ],
        "contractDependencies": [
          473,
          917
        ],
        "contractKind": "contract",
        "documentation": "@title ERC20Mintable\n@dev ERC20 minting logic\nSourced from OpenZeppelin and thoroughly butchered to remove security guards.\nAnybody can mint - STRICTLY FOR TEST PURPOSES",
        "fullyImplemented": true,
        "id": 940,
        "linearizedBaseContracts": [
          940,
          917,
          473
        ],
        "name": "ERC20Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 938,
              "nodeType": "Block",
              "src": "588:44:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 932,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 924,
                        "src": "600:2:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 933,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 926,
                        "src": "604:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 931,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 825,
                      "src": "594:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 934,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "594:16:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 935,
                  "nodeType": "ExpressionStatement",
                  "src": "594:16:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 936,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "623:4:4",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 930,
                  "id": 937,
                  "nodeType": "Return",
                  "src": "616:11:4"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param value The amount of tokens to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 939,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 927,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 924,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 939,
                  "src": "522:10:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 923,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "522:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 926,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 939,
                  "src": "538:13:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 925,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "538:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "516:39:4"
            },
            "payable": false,
            "returnParameters": {
              "id": 930,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 929,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 939,
                  "src": "580:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 928,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "580:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "579:6:4"
            },
            "scope": 940,
            "src": "503:129:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 941,
        "src": "238:396:4"
      }
    ],
    "src": "0:634:4"
  },
  "legacyAST": {
    "absolutePath": "/Users/paulrberg/Documents/Work/AZTEC/Coding/AZTEC/contracts/ERC20/ERC20Mintable.sol",
    "exportedSymbols": {
      "ERC20Mintable": [
        940
      ]
    },
    "id": 941,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 919,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:4"
      },
      {
        "absolutePath": "/Users/paulrberg/Documents/Work/AZTEC/Coding/AZTEC/contracts/ERC20/ERC20.sol",
        "file": "./ERC20.sol",
        "id": 920,
        "nodeType": "ImportDirective",
        "scope": 941,
        "sourceUnit": 918,
        "src": "26:21:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 921,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 917,
              "src": "264:5:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$917",
                "typeString": "contract ERC20"
              }
            },
            "id": 922,
            "nodeType": "InheritanceSpecifier",
            "src": "264:5:4"
          }
        ],
        "contractDependencies": [
          473,
          917
        ],
        "contractKind": "contract",
        "documentation": "@title ERC20Mintable\n@dev ERC20 minting logic\nSourced from OpenZeppelin and thoroughly butchered to remove security guards.\nAnybody can mint - STRICTLY FOR TEST PURPOSES",
        "fullyImplemented": true,
        "id": 940,
        "linearizedBaseContracts": [
          940,
          917,
          473
        ],
        "name": "ERC20Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 938,
              "nodeType": "Block",
              "src": "588:44:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 932,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 924,
                        "src": "600:2:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 933,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 926,
                        "src": "604:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 931,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 825,
                      "src": "594:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 934,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "594:16:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 935,
                  "nodeType": "ExpressionStatement",
                  "src": "594:16:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 936,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "623:4:4",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 930,
                  "id": 937,
                  "nodeType": "Return",
                  "src": "616:11:4"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param value The amount of tokens to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 939,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 927,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 924,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 939,
                  "src": "522:10:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 923,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "522:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 926,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 939,
                  "src": "538:13:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 925,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "538:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "516:39:4"
            },
            "payable": false,
            "returnParameters": {
              "id": 930,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 929,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 939,
                  "src": "580:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 928,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "580:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "579:6:4"
            },
            "scope": 940,
            "src": "503:129:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 941,
        "src": "238:396:4"
      }
    ],
    "src": "0:634:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {
    "7923": {
      "events": {},
      "links": {},
      "address": "0xC1233a47DC93E1D5C3B16f561Ce2445A594cD7A3",
      "transactionHash": "0x1fa1a02d5cbd6a951e76fa579a4e0a400af8610f02472e166ab51a24289425b2"
    }
  },
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-01-15T14:33:33.331Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "value": "The amount of tokens to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      }
    },
    "title": "ERC20Mintable"
  },
  "userdoc": {
    "methods": {}
  }
}